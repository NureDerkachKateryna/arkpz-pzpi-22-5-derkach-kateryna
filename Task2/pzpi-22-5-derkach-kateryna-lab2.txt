Міністерство освіти та науки України
Харківський національний університет радіоелектроніки





Лабораторна робота №2
з дисципліни: «Аналіз та рефакторинг коду»







                                       Виконала
                                       ст. гр. ПЗПІ-22-5
                                       Деркач Катерина Юріївна
                                       
                                       Перевірив 
                                       Дашенков Д.С.
                                       
                                       
                                       

Харків 2024
Лабораторна робота №2 

     Мета: розробити базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
     СУБД MS SQL Server була обрана для створення бази даних і збереження даних в ній.
     Серверна частина була написано мовою програмування C# з допомогою технологій ASP.NET WebAPI.
     Щоб представити архітектуру системи, програма була написана на основі трьохрівневої архітектура.
     У системі було виділено дві ролі: користувач та адміністратор. На діаграмі показано функціонал, який буде їм доступний (див. рисунок 1).
     Була розроблена база даних, яка складається з 7 таблиць (див. рисунок 2). Також була створена діаграма структури БД (див. рисунок 3).
     

Рисунок 1 – UML-діаграма


Рисунок 2 – ER-діаграма


Рисунок 3 – Діаграма структури БД
     Було розроблено специфікацію API.
     AccountController:
     1. POST /api/account/login
     Опис: Виконує вхід користувача.
     Вхід: LoginViewModel (email, password).
     Вихід: Токен автентифікації та інформація про користувача.
     2. POST /api/account/register
     Опис: реєструє нового користувача.
     Вхід: RegisterViewModel (username, email, password, etc.).
     Вихід: успішний статус або помилка.
     3. GET /api/account/current
     Опис: отримує інформацію про поточного авторизованого користувача.
     Вихід: UserViewModel (інформація про користувача).
     4. PUT /api/account/{email}/{oldPassword}/{newPassword}
     Опис: змінює пароль користувача.
     Вихід: успішний статус або помилка.
     
     BansController
     1. POST /api/bans
     Опис: додає новий бан.
     Вхід: AddBanViewModel.
     Вихід: No content або помилка.
     2. DELETE /api/bans/{banId}
     Опис: видаляє бан за ідентифікатором.
     Вихід: No content або помилка.
     3. GET /api/bans
     Опис: отримує список усіх банів.
     Вихід: список BanViewModel.
     
     ProductsController
     1. POST /api/products
     Опис: додає новий продукт.
     Вхід: AddProductViewModel.
     Вихід: No content або помилка.
     2. DELETE /api/products/{productId}
     Опис: видаляє продукт за ідентифікатором.
     Вихід: No content або помилка.
     3. GET /api/products
     Опис: отримує всі продукти.
     Вихід: список ProductViewModel.
     4. GET /api/products/GetProduct/{productId}
     Опис: отримує інформацію про продукт за ідентифікатором.
     Вихід: ProductViewModel.
     5. GET /api/products/Products/Banned/{userId}
     Опис: отримує список забанених продуктів для користувача.
     Вихід: список ProductViewModel.
     6. PUT /api/products
     Опис: редагує продукт.
     Вхід: UpdateProductViewModel.
     Вихід: No content або помилка.
     
     SkincareRoutinesController
     1. POST /api/skincareroutines
     Опис: додає нову рутину.
     Вхід: AddSkincareRoutineViewModel.
     Вихід: No content або помилка.
     2. POST /api/skincareroutines/{skincareRoutineId}/{productId}
     Опис: додає продукт до рутини.
     Вихід: No content або помилка.
     3. DELETE /api/skincareroutines/{skincareRoutineId}
     Опис: видаляє рутину за ідентифікатором.
     Вихід: No content або помилка.
     4. GET /api/skincareroutines
     Опис: отримує всі рутини.
     Вихід: список SkincareRoutineViewModel.
     5. PUT /api/skincareroutines
     Опис: редагує рутину.
     Вхід: UpdateSkincareRoutineViewModel.
     Вихід: No content або помилка.
     
     UsersController
     1. DELETE /api/users/{userId}
     Опис: видаляє користувача за ідентифікатором.
     Вихід: No content або помилка.
     2. GET /api/users
     Опис: отримує всіх користувачів.
     Вихід: список UserViewModel.
     3. PUT /api/users
     Опис: редагує інформацію про користувача.
     Вхід: UpdateUserViewModel.
     Вихід: No content або помилка.
     Висновок: під час лабораторної роботи навчилася розробляти базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
2







